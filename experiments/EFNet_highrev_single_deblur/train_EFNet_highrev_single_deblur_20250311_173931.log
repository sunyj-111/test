2025-03-11 17:39:31,569 INFO: 
                ____                _       _____  ____
               / __ ) ____ _ _____ (_)_____/ ___/ / __ \
              / __  |/ __ `// ___// // ___/\__ \ / /_/ /
             / /_/ // /_/ /(__  )/ // /__ ___/ // _, _/
            /_____/ \__,_//____//_/ \___//____//_/ |_|
     ______                   __   __                 __      __
    / ____/____   ____   ____/ /  / /   __  __ _____ / /__   / /
   / / __ / __ \ / __ \ / __  /  / /   / / / // ___// //_/  / /
  / /_/ // /_/ // /_/ // /_/ /  / /___/ /_/ // /__ / /<    /_/
  \____/ \____/ \____/ \____/  /_____/\____/ \___//_/|_|  (_)
    
Version Information: 
	BasicSR: 1.2.0+ac1e6b0
	PyTorch: 2.3.0+cu121
	TorchVision: 0.18.0+cu121
2025-03-11 17:39:31,569 INFO: 
  name: EFNet_highrev_single_deblur
  model_type: ImageEventRestorationModel
  scale: 1
  num_gpu: 1
  manual_seed: 10
  datasets:[
    train:[
      name: highrev-train
      type: NpzPngSingleDeblurDataset
      dataroot: ./datasets/HighREV/train
      voxel_bins: 6
      gt_size: 256
      norm_voxel: True
      use_hflip: True
      use_rot: True
      filename_tmpl: {}
      io_backend:[
        type: disk
      ]
      use_shuffle: True
      num_worker_per_gpu: 3
      batch_size_per_gpu: 4
      dataset_enlarge_ratio: 4
      prefetch_mode: cpu
      num_prefetch_queue: 2
      phase: train
      scale: 1
    ]
    val:[
      name: highrev-val
      type: NpzPngSingleDeblurDataset
      voxel_bins: 6
      dataroot: /root/autodl-tmp/NTIRE2025_EventDeblur_challenge-main/datasets/HighREV/val
      gt_size: None
      norm_voxel: True
      io_backend:[
        type: disk
      ]
      use_hflip: False
      use_rot: False
      phase: val
      scale: 1
    ]
  ]
  dataset_name: HighREV
  network_g:[
    type: EFNet
    wf: 64
    fuse_before_downsample: True
  ]
  path:[
    pretrain_network_g: None
    strict_load_g: True
    resume_state: experiments/EFNet_highrev_single_deblur/training_states/20000.state
    training_states: /root/autodl-tmp/NTIRE2025_EventDeblur_challenge-main/experiments/EFNet_highrev_single_deblur/training_states
    root: /root/autodl-tmp/NTIRE2025_EventDeblur_challenge-main
    experiments_root: /root/autodl-tmp/NTIRE2025_EventDeblur_challenge-main/experiments/EFNet_highrev_single_deblur
    models: /root/autodl-tmp/NTIRE2025_EventDeblur_challenge-main/experiments/EFNet_highrev_single_deblur/models
    log: /root/autodl-tmp/NTIRE2025_EventDeblur_challenge-main/experiments/EFNet_highrev_single_deblur
    visualization: /root/autodl-tmp/NTIRE2025_EventDeblur_challenge-main/experiments/EFNet_highrev_single_deblur/visualization
  ]
  train:[
    optim_g:[
      type: AdamW
      lr: 0.0002
      weight_decay: 0.0001
      betas: [0.9, 0.99]
    ]
    scheduler:[
      type: TrueCosineAnnealingLR
      T_max: 200000
      eta_min: 1e-07
    ]
    total_iter: 40000
    warmup_iter: -1
    pixel_opt:[
      type: PSNRLoss
      loss_weight: 0.5
      reduction: mean
    ]
  ]
  val:[
    val_freq: 10000
    save_img: False
    grids: None
    crop_size: None
    max_minibatch: 8
    metrics:[
      psnr:[
        type: calculate_psnr
        crop_border: 0
        test_y_channel: False
      ]
      ssim:[
        type: calculate_ssim
        crop_border: 0
        test_y_channel: False
      ]
    ]
  ]
  logger:[
    print_freq: 200
    save_checkpoint_freq: 20000.0
    use_tb_logger: True
  ]
  dist_params:[
    backend: nccl
    port: 29500
  ]
  is_train: True
  dist: False
  rank: 0
  world_size: 1

2025-03-11 17:40:08,184 INFO: Dataset initialized with 1771 samples.
2025-03-11 17:40:08,185 INFO: Dataset NpzPngSingleDeblurDataset - highrev-train is created.
2025-03-11 17:40:08,185 INFO: Use cpu prefetch dataloader: num_prefetch_queue = 2
2025-03-11 17:40:08,186 INFO: Training statistics:
	Number of train images: 1771
	Dataset enlarge ratio: 4
	Batch size per gpu: 4
	World size (gpu number): 1
	Require iter number per epoch: 1771
	Total epochs: 23; iters: 40000.
2025-03-11 17:40:10,224 INFO: Dataset initialized with 421 samples.
2025-03-11 17:40:10,224 INFO: Dataset NpzPngSingleDeblurDataset - highrev-val is created.
2025-03-11 17:40:10,225 INFO: Number of val images/folders in highrev-val: 421
2025-03-11 17:40:10,225 INFO: Set pretrain_network_g to /root/autodl-tmp/NTIRE2025_EventDeblur_challenge-main/experiments/EFNet_highrev_single_deblur/models/net_g_20000.pth
2025-03-11 17:40:10,353 INFO: Network: EFNet, with parameters: 11,438,592
2025-03-11 17:40:10,353 INFO: EFNet(
  (down_path_1): ModuleList(
    (0): UNetConvBlock(
      (identity): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
      (conv_1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (relu_1): LeakyReLU(negative_slope=0.2)
      (conv_2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (relu_2): LeakyReLU(negative_slope=0.2)
      (downsample): Conv2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (image_event_transformer): EventImage_ChannelAttentionTransformerBlock(
        (norm1_image): LayerNorm(
          (body): WithBias_LayerNorm()
        )
        (norm1_event): LayerNorm(
          (body): WithBias_LayerNorm()
        )
        (attn): Mutual_Attention(
          (q_image): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (kv_event): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (q_event): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (kv_image): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (proj_out): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (norm2): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
        (ffn): Mlp(
          (fc1): Linear(in_features=64, out_features=256, bias=True)
          (act): GELU(approximate='none')
          (fc2): Linear(in_features=256, out_features=64, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
      )
    )
    (1): UNetConvBlock(
      (identity): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1))
      (conv_1): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (relu_1): LeakyReLU(negative_slope=0.2)
      (conv_2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (relu_2): LeakyReLU(negative_slope=0.2)
      (downsample): Conv2d(128, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (image_event_transformer): EventImage_ChannelAttentionTransformerBlock(
        (norm1_image): LayerNorm(
          (body): WithBias_LayerNorm()
        )
        (norm1_event): LayerNorm(
          (body): WithBias_LayerNorm()
        )
        (attn): Mutual_Attention(
          (q_image): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (kv_event): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (q_event): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (kv_image): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (proj_out): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (norm2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
        (ffn): Mlp(
          (fc1): Linear(in_features=128, out_features=512, bias=True)
          (act): GELU(approximate='none')
          (fc2): Linear(in_features=512, out_features=128, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
      )
    )
    (2): UNetConvBlock(
      (identity): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1))
      (conv_1): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (relu_1): LeakyReLU(negative_slope=0.2)
      (conv_2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (relu_2): LeakyReLU(negative_slope=0.2)
      (image_event_transformer): EventImage_ChannelAttentionTransformerBlock(
        (norm1_image): LayerNorm(
          (body): WithBias_LayerNorm()
        )
        (norm1_event): LayerNorm(
          (body): WithBias_LayerNorm()
        )
        (attn): Mutual_Attention(
          (q_image): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (kv_event): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (q_event): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (kv_image): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (proj_out): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (ffn): Mlp(
          (fc1): Linear(in_features=256, out_features=1024, bias=True)
          (act): GELU(approximate='none')
          (fc2): Linear(in_features=1024, out_features=256, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
      )
    )
  )
  (down_path_2): ModuleList(
    (0): UNetConvBlock(
      (identity): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
      (conv_1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (relu_1): LeakyReLU(negative_slope=0.2)
      (conv_2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (relu_2): LeakyReLU(negative_slope=0.2)
      (emgc_enc): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (emgc_dec): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (emgc_enc_mask): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (emgc_dec_mask): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (downsample): Conv2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    )
    (1): UNetConvBlock(
      (identity): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1))
      (conv_1): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (relu_1): LeakyReLU(negative_slope=0.2)
      (conv_2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (relu_2): LeakyReLU(negative_slope=0.2)
      (emgc_enc): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (emgc_dec): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (emgc_enc_mask): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (emgc_dec_mask): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (downsample): Conv2d(128, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    )
    (2): UNetConvBlock(
      (identity): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1))
      (conv_1): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (relu_1): LeakyReLU(negative_slope=0.2)
      (conv_2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (relu_2): LeakyReLU(negative_slope=0.2)
    )
  )
  (conv_01): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv_02): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (down_path_ev): ModuleList(
    (0): UNetEVConvBlock(
      (identity): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
      (conv_1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (relu_1): LeakyReLU(negative_slope=0.2)
      (conv_2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (relu_2): LeakyReLU(negative_slope=0.2)
      (conv_before_merge): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
      (downsample): Conv2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    )
    (1): UNetEVConvBlock(
      (identity): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1))
      (conv_1): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (relu_1): LeakyReLU(negative_slope=0.2)
      (conv_2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (relu_2): LeakyReLU(negative_slope=0.2)
      (conv_before_merge): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
      (downsample): Conv2d(128, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    )
    (2): UNetEVConvBlock(
      (identity): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1))
      (conv_1): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (relu_1): LeakyReLU(negative_slope=0.2)
      (conv_2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (relu_2): LeakyReLU(negative_slope=0.2)
      (conv_before_merge): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (conv_ev1): Conv2d(6, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (dynamic_fusion_modules): ModuleList(
    (0): EventDynamicConv(
      (dynamic_kernel_generator): Sequential(
        (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(16, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (static_conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (1): EventDynamicConv(
      (dynamic_kernel_generator): Sequential(
        (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(32, 1152, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (static_conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (2): EventDynamicConv(
      (dynamic_kernel_generator): Sequential(
        (0): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 2304, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (static_conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
  )
  (up_path_1): ModuleList(
    (0): UNetUpBlock(
      (up): ConvTranspose2d(256, 128, kernel_size=(2, 2), stride=(2, 2))
      (conv_block): UNetConvBlock(
        (identity): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
        (conv_1): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (relu_1): LeakyReLU(negative_slope=0.2)
        (conv_2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (relu_2): LeakyReLU(negative_slope=0.2)
      )
    )
    (1): UNetUpBlock(
      (up): ConvTranspose2d(128, 64, kernel_size=(2, 2), stride=(2, 2))
      (conv_block): UNetConvBlock(
        (identity): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
        (conv_1): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (relu_1): LeakyReLU(negative_slope=0.2)
        (conv_2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (relu_2): LeakyReLU(negative_slope=0.2)
      )
    )
  )
  (up_path_2): ModuleList(
    (0): UNetUpBlock(
      (up): ConvTranspose2d(256, 128, kernel_size=(2, 2), stride=(2, 2))
      (conv_block): UNetConvBlock(
        (identity): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
        (conv_1): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (relu_1): LeakyReLU(negative_slope=0.2)
        (conv_2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (relu_2): LeakyReLU(negative_slope=0.2)
      )
    )
    (1): UNetUpBlock(
      (up): ConvTranspose2d(128, 64, kernel_size=(2, 2), stride=(2, 2))
      (conv_block): UNetConvBlock(
        (identity): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
        (conv_1): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (relu_1): LeakyReLU(negative_slope=0.2)
        (conv_2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (relu_2): LeakyReLU(negative_slope=0.2)
      )
    )
  )
  (skip_conv_1): ModuleList(
    (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (skip_conv_2): ModuleList(
    (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (sam12): SAM(
    (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (conv2): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (conv3): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (cat12): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
  (last): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
)
2025-03-11 17:40:10,353 INFO: Loading EFNet model from /root/autodl-tmp/NTIRE2025_EventDeblur_challenge-main/experiments/EFNet_highrev_single_deblur/models/net_g_20000.pth.
2025-03-11 17:40:10,420 INFO: Model [ImageEventRestorationModel] is created.
2025-03-11 17:40:10,422 INFO: Resuming training from epoch: 11, iter: 20000.
2025-03-11 17:40:10,457 INFO: Start training from epoch: 11, iter: 20000
2025-03-11 17:49:49,112 INFO: [EFNet..][epoch: 11, iter:  20,200, lr:(1.950e-04,1.950e-05,)] [eta: 15:50:02, time (data): 7.167 (6.972)] l_pix: -3.8215e+01 
2025-03-11 17:58:31,325 INFO: [EFNet..][epoch: 11, iter:  20,400, lr:(1.949e-04,1.949e-05,)] [eta: 14:56:46, time (data): 0.190 (0.002)] l_pix: -3.9139e+01 
2025-03-11 18:07:16,170 INFO: [EFNet..][epoch: 11, iter:  20,600, lr:(1.948e-04,1.948e-05,)] [eta: 14:34:35, time (data): 0.189 (0.002)] l_pix: -4.4401e+01 
2025-03-11 18:16:30,572 INFO: [EFNet..][epoch: 11, iter:  20,800, lr:(1.947e-04,1.947e-05,)] [eta: 14:30:55, time (data): 2.952 (2.757)] l_pix: -4.2837e+01 
2025-03-11 18:25:02,637 INFO: [EFNet..][epoch: 11, iter:  21,000, lr:(1.946e-04,1.946e-05,)] [eta: 14:11:38, time (data): 0.188 (0.002)] l_pix: -3.4307e+01 
2025-03-11 18:34:04,531 INFO: [EFNet..][epoch: 11, iter:  21,200, lr:(1.945e-04,1.945e-05,)] [eta: 14:03:42, time (data): 0.189 (0.002)] l_pix: -4.1819e+01 
2025-03-11 18:42:36,250 INFO: [EFNet..][epoch: 11, iter:  21,400, lr:(1.944e-04,1.944e-05,)] [eta: 13:48:47, time (data): 5.242 (5.048)] l_pix: -4.5646e+01 
2025-03-11 18:51:36,014 INFO: [EFNet..][epoch: 11, iter:  21,600, lr:(1.943e-04,1.943e-05,)] [eta: 13:40:50, time (data): 4.983 (4.791)] l_pix: -4.1212e+01 
2025-03-11 19:00:42,218 INFO: [EFNet..][epoch: 12, iter:  21,800, lr:(1.942e-04,1.942e-05,)] [eta: 13:33:45, time (data): 12.743 (12.548)] l_pix: -3.2564e+01 
2025-03-11 19:09:19,523 INFO: [EFNet..][epoch: 12, iter:  22,000, lr:(1.941e-04,1.941e-05,)] [eta: 13:21:55, time (data): 8.187 (7.991)] l_pix: -4.0197e+01 
2025-03-11 19:18:18,639 INFO: [EFNet..][epoch: 12, iter:  22,200, lr:(1.940e-04,1.940e-05,)] [eta: 13:13:36, time (data): 0.188 (0.002)] l_pix: -4.0184e+01 
2025-03-11 19:27:15,614 INFO: [EFNet..][epoch: 12, iter:  22,400, lr:(1.939e-04,1.939e-05,)] [eta: 13:04:55, time (data): 8.969 (8.774)] l_pix: -3.6925e+01 
2025-03-11 19:36:20,403 INFO: [EFNet..][epoch: 12, iter:  22,600, lr:(1.938e-04,1.938e-05,)] [eta: 12:57:04, time (data): 0.778 (0.588)] l_pix: -3.9924e+01 
2025-03-11 19:45:23,257 INFO: [EFNet..][epoch: 12, iter:  22,800, lr:(1.937e-04,1.937e-05,)] [eta: 12:48:51, time (data): 2.836 (2.641)] l_pix: -3.8926e+01 
2025-03-11 19:54:29,639 INFO: [EFNet..][epoch: 12, iter:  23,000, lr:(1.935e-04,1.936e-05,)] [eta: 12:40:50, time (data): 0.188 (0.002)] l_pix: -3.7790e+01 
2025-03-11 20:03:26,038 INFO: [EFNet..][epoch: 12, iter:  23,200, lr:(1.934e-04,1.935e-05,)] [eta: 12:31:50, time (data): 3.527 (3.332)] l_pix: -4.2517e+01 
2025-03-11 20:12:39,409 INFO: [EFNet..][epoch: 12, iter:  23,400, lr:(1.933e-04,1.934e-05,)] [eta: 12:24:12, time (data): 3.630 (3.437)] l_pix: -3.7996e+01 
2025-03-11 20:21:48,698 INFO: [EFNet..][epoch: 13, iter:  23,600, lr:(1.932e-04,1.932e-05,)] [eta: 12:16:06, time (data): 0.189 (0.002)] l_pix: -3.9745e+01 
2025-03-11 20:30:34,215 INFO: [EFNet..][epoch: 13, iter:  23,800, lr:(1.931e-04,1.931e-05,)] [eta: 12:06:11, time (data): 0.189 (0.002)] l_pix: -4.5377e+01 
2025-03-11 20:39:55,443 INFO: [EFNet..][epoch: 13, iter:  24,000, lr:(1.930e-04,1.930e-05,)] [eta: 11:58:46, time (data): 0.190 (0.003)] l_pix: -3.8339e+01 
2025-03-11 20:49:12,378 INFO: [EFNet..][epoch: 13, iter:  24,200, lr:(1.929e-04,1.929e-05,)] [eta: 11:50:54, time (data): 6.646 (6.451)] l_pix: -3.6277e+01 
2025-03-11 20:58:38,609 INFO: [EFNet..][epoch: 13, iter:  24,400, lr:(1.927e-04,1.928e-05,)] [eta: 11:43:27, time (data): 0.190 (0.003)] l_pix: -4.2026e+01 
2025-03-11 21:07:45,019 INFO: [EFNet..][epoch: 13, iter:  24,600, lr:(1.926e-04,1.927e-05,)] [eta: 11:34:44, time (data): 3.093 (2.897)] l_pix: -4.2157e+01 
2025-03-11 21:16:45,067 INFO: [EFNet..][epoch: 13, iter:  24,800, lr:(1.925e-04,1.925e-05,)] [eta: 11:25:38, time (data): 0.188 (0.002)] l_pix: -4.1322e+01 
2025-03-11 21:25:42,842 INFO: [EFNet..][epoch: 13, iter:  25,000, lr:(1.924e-04,1.924e-05,)] [eta: 11:16:26, time (data): 0.190 (0.003)] l_pix: -3.8100e+01 
2025-03-11 21:34:55,520 INFO: [EFNet..][epoch: 13, iter:  25,200, lr:(1.923e-04,1.923e-05,)] [eta: 11:07:57, time (data): 4.870 (4.675)] l_pix: -3.9245e+01 
2025-03-11 21:43:40,785 INFO: [EFNet..][epoch: 14, iter:  25,400, lr:(1.922e-04,1.922e-05,)] [eta: 10:58:12, time (data): 6.544 (6.351)] l_pix: -3.8104e+01 
2025-03-11 21:52:38,853 INFO: [EFNet..][epoch: 14, iter:  25,600, lr:(1.920e-04,1.921e-05,)] [eta: 10:49:03, time (data): 0.188 (0.002)] l_pix: -3.9909e+01 
2025-03-11 22:01:31,892 INFO: [EFNet..][epoch: 14, iter:  25,800, lr:(1.919e-04,1.919e-05,)] [eta: 10:39:43, time (data): 0.192 (0.003)] l_pix: -3.8924e+01 
2025-03-11 22:10:49,928 INFO: [EFNet..][epoch: 14, iter:  26,000, lr:(1.918e-04,1.918e-05,)] [eta: 10:31:23, time (data): 7.399 (7.197)] l_pix: -3.8486e+01 
2025-03-11 22:20:02,028 INFO: [EFNet..][epoch: 14, iter:  26,200, lr:(1.917e-04,1.917e-05,)] [eta: 10:22:46, time (data): 25.812 (25.610)] l_pix: -4.0599e+01 
2025-03-11 22:29:18,425 INFO: [EFNet..][epoch: 14, iter:  26,400, lr:(1.915e-04,1.916e-05,)] [eta: 10:14:16, time (data): 2.284 (2.088)] l_pix: -4.1484e+01 
2025-03-11 22:38:57,043 INFO: [EFNet..][epoch: 14, iter:  26,600, lr:(1.914e-04,1.914e-05,)] [eta: 10:06:28, time (data): 9.241 (9.045)] l_pix: -3.9494e+01 
2025-03-11 22:47:51,077 INFO: [EFNet..][epoch: 14, iter:  26,800, lr:(1.913e-04,1.913e-05,)] [eta: 9:57:07, time (data): 6.325 (6.130)] l_pix: -3.9146e+01 
2025-03-11 22:57:28,857 INFO: [EFNet..][epoch: 14, iter:  27,000, lr:(1.911e-04,1.912e-05,)] [eta: 9:49:09, time (data): 0.188 (0.002)] l_pix: -4.4164e+01 
2025-03-11 23:06:54,180 INFO: [EFNet..][epoch: 15, iter:  27,200, lr:(1.910e-04,1.911e-05,)] [eta: 9:40:43, time (data): 0.189 (0.002)] l_pix: -4.0349e+01 
2025-03-11 23:15:29,135 INFO: [EFNet..][epoch: 15, iter:  27,400, lr:(1.909e-04,1.909e-05,)] [eta: 9:30:48, time (data): 0.188 (0.002)] l_pix: -3.9918e+01 
2025-03-11 23:24:29,658 INFO: [EFNet..][epoch: 15, iter:  27,600, lr:(1.908e-04,1.908e-05,)] [eta: 9:21:40, time (data): 4.383 (4.189)] l_pix: -3.4767e+01 
2025-03-11 23:33:57,524 INFO: [EFNet..][epoch: 15, iter:  27,800, lr:(1.906e-04,1.907e-05,)] [eta: 9:13:14, time (data): 2.766 (2.571)] l_pix: -3.8315e+01 
2025-03-11 23:43:28,128 INFO: [EFNet..][epoch: 15, iter:  28,000, lr:(1.905e-04,1.905e-05,)] [eta: 9:04:49, time (data): 0.189 (0.002)] l_pix: -4.2356e+01 
2025-03-11 23:53:39,382 INFO: [EFNet..][epoch: 15, iter:  28,200, lr:(1.904e-04,1.904e-05,)] [eta: 8:57:20, time (data): 3.034 (2.841)] l_pix: -4.1331e+01 
2025-03-12 00:02:19,110 INFO: [EFNet..][epoch: 15, iter:  28,400, lr:(1.902e-04,1.903e-05,)] [eta: 8:47:36, time (data): 0.189 (0.002)] l_pix: -3.9954e+01 
2025-03-12 00:11:30,121 INFO: [EFNet..][epoch: 15, iter:  28,600, lr:(1.901e-04,1.901e-05,)] [eta: 8:38:37, time (data): 0.188 (0.002)] l_pix: -3.6685e+01 
2025-03-12 00:20:59,552 INFO: [EFNet..][epoch: 15, iter:  28,800, lr:(1.899e-04,1.900e-05,)] [eta: 8:30:01, time (data): 0.189 (0.002)] l_pix: -4.0522e+01 
2025-03-12 00:30:14,121 INFO: [EFNet..][epoch: 16, iter:  29,000, lr:(1.898e-04,1.899e-05,)] [eta: 8:21:05, time (data): 3.986 (3.791)] l_pix: -4.2538e+01 
2025-03-12 00:39:23,251 INFO: [EFNet..][epoch: 16, iter:  29,200, lr:(1.897e-04,1.897e-05,)] [eta: 8:12:01, time (data): 0.188 (0.002)] l_pix: -4.5311e+01 
2025-03-12 00:48:28,288 INFO: [EFNet..][epoch: 16, iter:  29,400, lr:(1.895e-04,1.896e-05,)] [eta: 8:02:52, time (data): 4.929 (4.735)] l_pix: -3.6630e+01 
2025-03-12 00:57:39,360 INFO: [EFNet..][epoch: 16, iter:  29,600, lr:(1.894e-04,1.894e-05,)] [eta: 7:53:50, time (data): 0.188 (0.002)] l_pix: -3.9445e+01 
2025-03-12 01:06:19,968 INFO: [EFNet..][epoch: 16, iter:  29,800, lr:(1.892e-04,1.893e-05,)] [eta: 7:44:16, time (data): 0.188 (0.002)] l_pix: -4.0560e+01 
2025-03-12 01:15:57,792 INFO: [EFNet..][epoch: 16, iter:  30,000, lr:(1.891e-04,1.892e-05,)] [eta: 7:35:41, time (data): 0.584 (0.394)] l_pix: -3.8476e+01 
2025-03-12 01:31:50,764 INFO: Validation EFNet_highrev_single_deblur,		 # psnr: 34.4052	 # ssim: 0.9655
2025-03-12 01:41:01,000 INFO: [EFNet..][epoch: 16, iter:  30,200, lr:(1.890e-04,1.890e-05,)] [eta: 7:41:53, time (data): 0.694 (0.504)] l_pix: -3.7778e+01 
2025-03-12 01:50:05,269 INFO: [EFNet..][epoch: 16, iter:  30,400, lr:(1.888e-04,1.889e-05,)] [eta: 7:32:08, time (data): 6.438 (6.243)] l_pix: -3.9267e+01 
2025-03-12 01:59:21,765 INFO: [EFNet..][epoch: 16, iter:  30,600, lr:(1.887e-04,1.887e-05,)] [eta: 7:22:35, time (data): 0.188 (0.002)] l_pix: -3.9049e+01 
2025-03-12 02:08:17,744 INFO: [EFNet..][epoch: 17, iter:  30,800, lr:(1.885e-04,1.886e-05,)] [eta: 7:12:45, time (data): 4.532 (4.340)] l_pix: -3.4344e+01 
2025-03-12 02:17:49,785 INFO: [EFNet..][epoch: 17, iter:  31,000, lr:(1.884e-04,1.884e-05,)] [eta: 7:03:27, time (data): 7.315 (7.123)] l_pix: -3.9935e+01 
2025-03-12 02:26:46,582 INFO: [EFNet..][epoch: 17, iter:  31,200, lr:(1.882e-04,1.883e-05,)] [eta: 6:53:40, time (data): 0.189 (0.002)] l_pix: -4.2878e+01 
2025-03-12 02:35:10,532 INFO: [EFNet..][epoch: 17, iter:  31,400, lr:(1.881e-04,1.881e-05,)] [eta: 6:43:30, time (data): 0.188 (0.002)] l_pix: -3.8232e+01 
2025-03-12 02:43:51,891 INFO: [EFNet..][epoch: 17, iter:  31,600, lr:(1.879e-04,1.880e-05,)] [eta: 6:33:37, time (data): 2.587 (2.393)] l_pix: -3.8007e+01 
2025-03-12 02:52:52,336 INFO: [EFNet..][epoch: 17, iter:  31,800, lr:(1.878e-04,1.878e-05,)] [eta: 6:23:59, time (data): 0.188 (0.002)] l_pix: -4.0496e+01 
2025-03-12 03:01:40,064 INFO: [EFNet..][epoch: 17, iter:  32,000, lr:(1.876e-04,1.877e-05,)] [eta: 6:14:15, time (data): 9.370 (9.176)] l_pix: -3.9839e+01 
2025-03-12 03:11:06,466 INFO: [EFNet..][epoch: 17, iter:  32,200, lr:(1.875e-04,1.875e-05,)] [eta: 6:04:56, time (data): 0.191 (0.002)] l_pix: -3.9365e+01 
2025-03-12 03:19:52,495 INFO: [EFNet..][epoch: 18, iter:  32,400, lr:(1.873e-04,1.874e-05,)] [eta: 5:55:13, time (data): 0.188 (0.002)] l_pix: -3.6999e+01 
2025-03-12 03:28:50,870 INFO: [EFNet..][epoch: 18, iter:  32,600, lr:(1.872e-04,1.872e-05,)] [eta: 5:45:39, time (data): 9.756 (9.563)] l_pix: -3.6155e+01 
2025-03-12 03:37:09,782 INFO: [EFNet..][epoch: 18, iter:  32,800, lr:(1.870e-04,1.871e-05,)] [eta: 5:35:44, time (data): 11.242 (11.048)] l_pix: -3.8370e+01 
2025-03-12 03:46:12,088 INFO: [EFNet..][epoch: 18, iter:  33,000, lr:(1.869e-04,1.869e-05,)] [eta: 5:26:15, time (data): 0.190 (0.002)] l_pix: -4.0045e+01 
2025-03-12 03:54:43,870 INFO: [EFNet..][epoch: 18, iter:  33,200, lr:(1.867e-04,1.868e-05,)] [eta: 5:16:31, time (data): 3.989 (3.795)] l_pix: -3.7314e+01 
2025-03-12 04:03:18,104 INFO: [EFNet..][epoch: 18, iter:  33,400, lr:(1.866e-04,1.866e-05,)] [eta: 5:06:50, time (data): 0.188 (0.002)] l_pix: -4.0204e+01 
2025-03-12 04:11:55,320 INFO: [EFNet..][epoch: 18, iter:  33,600, lr:(1.864e-04,1.865e-05,)] [eta: 4:57:13, time (data): 7.251 (7.056)] l_pix: -3.7310e+01 
2025-03-12 04:20:35,045 INFO: [EFNet..][epoch: 18, iter:  33,800, lr:(1.862e-04,1.863e-05,)] [eta: 4:47:39, time (data): 0.190 (0.002)] l_pix: -3.7179e+01 
2025-03-12 04:29:42,668 INFO: [EFNet..][epoch: 18, iter:  34,000, lr:(1.861e-04,1.861e-05,)] [eta: 4:38:18, time (data): 0.189 (0.002)] l_pix: -3.4210e+01 
2025-03-12 04:37:57,915 INFO: [EFNet..][epoch: 19, iter:  34,200, lr:(1.859e-04,1.860e-05,)] [eta: 4:28:36, time (data): 1.260 (1.070)] l_pix: -4.2933e+01 
2025-03-12 04:47:32,235 INFO: [EFNet..][epoch: 19, iter:  34,400, lr:(1.858e-04,1.858e-05,)] [eta: 4:19:27, time (data): 0.188 (0.002)] l_pix: -3.9301e+01 
2025-03-12 04:56:03,289 INFO: [EFNet..][epoch: 19, iter:  34,600, lr:(1.856e-04,1.857e-05,)] [eta: 4:09:55, time (data): 3.469 (3.276)] l_pix: -4.0997e+01 
2025-03-12 05:04:42,029 INFO: [EFNet..][epoch: 19, iter:  34,800, lr:(1.854e-04,1.855e-05,)] [eta: 4:00:26, time (data): 0.191 (0.002)] l_pix: -4.1769e+01 
2025-03-12 05:13:02,818 INFO: [EFNet..][epoch: 19, iter:  35,000, lr:(1.853e-04,1.853e-05,)] [eta: 3:50:53, time (data): 8.717 (8.524)] l_pix: -3.6781e+01 
2025-03-12 05:22:08,772 INFO: [EFNet..][epoch: 19, iter:  35,200, lr:(1.851e-04,1.852e-05,)] [eta: 3:41:36, time (data): 4.390 (4.195)] l_pix: -4.1759e+01 
2025-03-12 05:30:03,282 INFO: [EFNet..][epoch: 19, iter:  35,400, lr:(1.849e-04,1.850e-05,)] [eta: 3:31:58, time (data): 1.711 (1.521)] l_pix: -4.1081e+01 
2025-03-12 05:39:00,403 INFO: [EFNet..][epoch: 19, iter:  35,600, lr:(1.848e-04,1.848e-05,)] [eta: 3:22:41, time (data): 9.059 (8.864)] l_pix: -3.8999e+01 
2025-03-12 05:47:46,171 INFO: [EFNet..][epoch: 19, iter:  35,800, lr:(1.846e-04,1.847e-05,)] [eta: 3:13:21, time (data): 0.189 (0.002)] l_pix: -4.0822e+01 
2025-03-12 05:56:47,446 INFO: [EFNet..][epoch: 20, iter:  36,000, lr:(1.844e-04,1.845e-05,)] [eta: 3:04:05, time (data): 0.189 (0.002)] l_pix: -3.7866e+01 
2025-03-12 06:05:44,038 INFO: [EFNet..][epoch: 20, iter:  36,200, lr:(1.843e-04,1.843e-05,)] [eta: 2:54:49, time (data): 4.359 (4.164)] l_pix: -4.1170e+01 
2025-03-12 06:14:52,445 INFO: [EFNet..][epoch: 20, iter:  36,400, lr:(1.841e-04,1.842e-05,)] [eta: 2:45:36, time (data): 1.457 (1.268)] l_pix: -4.1032e+01 
2025-03-12 06:23:41,706 INFO: [EFNet..][epoch: 20, iter:  36,600, lr:(1.839e-04,1.840e-05,)] [eta: 2:36:19, time (data): 0.189 (0.002)] l_pix: -3.9459e+01 
2025-03-12 06:32:19,368 INFO: [EFNet..][epoch: 20, iter:  36,800, lr:(1.838e-04,1.838e-05,)] [eta: 2:27:01, time (data): 0.190 (0.002)] l_pix: -4.3967e+01 
2025-03-12 06:41:04,839 INFO: [EFNet..][epoch: 20, iter:  37,000, lr:(1.836e-04,1.837e-05,)] [eta: 2:17:45, time (data): 0.189 (0.002)] l_pix: -3.8290e+01 
2025-03-12 06:49:50,829 INFO: [EFNet..][epoch: 20, iter:  37,200, lr:(1.834e-04,1.835e-05,)] [eta: 2:08:29, time (data): 0.189 (0.002)] l_pix: -3.9449e+01 
2025-03-12 06:58:33,534 INFO: [EFNet..][epoch: 20, iter:  37,400, lr:(1.832e-04,1.833e-05,)] [eta: 1:59:14, time (data): 5.927 (5.733)] l_pix: -3.1787e+01 
2025-03-12 07:07:06,691 INFO: [EFNet..][epoch: 20, iter:  37,600, lr:(1.831e-04,1.831e-05,)] [eta: 1:49:59, time (data): 3.476 (3.280)] l_pix: -4.5564e+01 
2025-03-12 07:15:47,495 INFO: [EFNet..][epoch: 21, iter:  37,800, lr:(1.829e-04,1.830e-05,)] [eta: 1:40:45, time (data): 9.850 (9.654)] l_pix: -3.8746e+01 
2025-03-12 07:23:57,865 INFO: [EFNet..][epoch: 21, iter:  38,000, lr:(1.827e-04,1.828e-05,)] [eta: 1:31:28, time (data): 0.190 (0.002)] l_pix: -4.3352e+01 
2025-03-12 07:32:01,517 INFO: [EFNet..][epoch: 21, iter:  38,200, lr:(1.825e-04,1.826e-05,)] [eta: 1:22:13, time (data): 0.189 (0.002)] l_pix: -3.8547e+01 
2025-03-12 07:41:07,556 INFO: [EFNet..][epoch: 21, iter:  38,400, lr:(1.824e-04,1.824e-05,)] [eta: 1:13:04, time (data): 2.588 (2.391)] l_pix: -4.0959e+01 
2025-03-12 07:50:11,051 INFO: [EFNet..][epoch: 21, iter:  38,600, lr:(1.822e-04,1.823e-05,)] [eta: 1:03:55, time (data): 0.189 (0.002)] l_pix: -4.0225e+01 
2025-03-12 07:59:07,745 INFO: [EFNet..][epoch: 21, iter:  38,800, lr:(1.820e-04,1.821e-05,)] [eta: 0:54:46, time (data): 0.188 (0.002)] l_pix: -3.9216e+01 
2025-03-12 08:07:51,545 INFO: [EFNet..][epoch: 21, iter:  39,000, lr:(1.818e-04,1.819e-05,)] [eta: 0:45:37, time (data): 1.005 (0.815)] l_pix: -4.1362e+01 
2025-03-12 08:16:27,891 INFO: [EFNet..][epoch: 21, iter:  39,200, lr:(1.816e-04,1.817e-05,)] [eta: 0:36:27, time (data): 0.188 (0.002)] l_pix: -3.9138e+01 
2025-03-12 08:25:02,138 INFO: [EFNet..][epoch: 21, iter:  39,400, lr:(1.815e-04,1.815e-05,)] [eta: 0:27:19, time (data): 1.597 (1.407)] l_pix: -3.5149e+01 
2025-03-12 08:34:06,038 INFO: [EFNet..][epoch: 22, iter:  39,600, lr:(1.813e-04,1.814e-05,)] [eta: 0:18:11, time (data): 4.208 (4.013)] l_pix: -4.0579e+01 
2025-03-12 08:43:12,795 INFO: [EFNet..][epoch: 22, iter:  39,800, lr:(1.811e-04,1.812e-05,)] [eta: 0:09:04, time (data): 0.190 (0.002)] l_pix: -3.9921e+01 
2025-03-12 08:52:14,500 INFO: [EFNet..][epoch: 22, iter:  40,000, lr:(1.809e-04,1.810e-05,)] [eta: -1 day, 23:59:58, time (data): 0.188 (0.002)] l_pix: -3.6915e+01 
2025-03-12 08:52:14,500 INFO: Saving models and training states.
2025-03-12 09:08:01,421 INFO: Validation EFNet_highrev_single_deblur,		 # psnr: 34.8242	 # ssim: 0.9659
2025-03-12 09:08:01,438 INFO: End of training. Time consumed: 15:27:50
2025-03-12 09:08:01,439 INFO: Save the latest model.
2025-03-12 09:23:46,205 INFO: Validation EFNet_highrev_single_deblur,		 # psnr: 34.8242	 # ssim: 0.9659
